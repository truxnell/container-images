---
name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/release.yaml'
      - 'apps/**'

  pull_request:
    branches:
      - main
    paths:
      - 'apps/**'
      - '.github/workflows/release.yaml'

env:
  # Regstiry where the image is stored
  IMAGE_REGISTRY: ghcr.io

jobs:
  build:
    name: Build
    runs-on: self-hosted
    steps:
      - name: Get bjw-s-bot token
        id: get-app-token
        uses: getsentry/action-github-app-token@v2
        with:
          app_id: ${{ secrets.TRUXNELL_APP_ID }}
          private_key: ${{ secrets.TRUXNELL_APP_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ steps.get-app-token.outputs.token }}

      - name: Setup QEMU
        run: |
          sudo apt update
          sudo apt-get install -y qemu qemu-user-static

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builder

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest
          endpoint: builder
          driver-opts: image=moby/buildkit:latest

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /cache/buildcache
          key: ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository_owner }}/assets:buildcache
          restore-keys: |
            ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository_owner }}/assets:buildcache

      - name: Prepare
        id: prep
        run: |
          BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
          echo ::set-output name=build_date::${BUILD_DATE}
          VCS_REF=`git rev-parse --short HEAD`
          echo ::set-output name=vcs_ref::${VCS_REF}
          if [ "${{github.event_name}}" == "pull_request" ]; then
            echo ::set-output name=push::false
            echo ::set-output name=cache_from::"type=local,src=/cache/buildcache"
            echo ::set-output name=cache_to::""
          else
            echo ::set-output name=push::true
            echo ::set-output name=cache_from::"type=local,src=/cache/buildcache"
            echo ::set-output name=cache_to::"type=local,dest=/cache/buildcache,mode=max"
          fi

      - name: Login to image registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./dist/
          file: ./dist/docker/Dockerfile
          build-args: |
            VERSION="latest"
            BUILD_DATE="${{ steps.prep.outputs.build_date }}"
            VCS_REF="${{ steps.prep.outputs.vcs_ref }}"
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner | lower }}/assets:latest
          cache-from: ${{ steps.prep.outputs.cache_from }}
          cache-to: ${{ steps.prep.outputs.cache_to }}
          push: ${{ steps.prep.outputs.push }}
